{"version":3,"sources":["Components.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","react_default","a","createElement","id","role","href","Welcome","ProjectTile","props","link","className","style","backgroundImage","imgSrc","title","ProjectSection","Footer","target","rel","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mNAEO,SAASA,IAChB,OACAC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UACNH,EAAAC,EAAAC,cAAA,MAAIE,KAAK,cACRJ,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,KAAGG,KAAK,mBAAmBF,GAAG,aAA9B,mBACIH,EAAAC,EAAAC,cAAA,UACJF,EAAAC,EAAAC,cAAA,KAAGG,KAAK,YAAYF,GAAG,UAAvB,aACIH,EAAAC,EAAAC,cAAA,UACJF,EAAAC,EAAAC,cAAA,KAAGG,KAAK,iBAAR,cAOG,SAASC,IACd,OACEN,EAAAC,EAAAC,cAAA,UAAQC,GAAG,mBACTH,EAAAC,EAAAC,cAAA,MAAIC,GAAG,gBACLH,EAAAC,EAAAC,cAAA,QAAMC,GAAG,YAAT,OACAH,EAAAC,EAAAC,cAAA,QAAMC,GAAG,QAAT,cACAH,EAAAC,EAAAC,cAAA,QAAMC,GAAG,WAAT,4BAMR,SAASI,EAAYC,GACnB,OACER,EAAAC,EAAAC,cAAA,KAAGG,KAAMG,EAAMC,MACbT,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,eAAeC,MAAO,CAACC,gBAAiB,OAASJ,EAAMK,OAAS,MAC/Eb,EAAAC,EAAAC,cAAA,YAAOM,EAAMM,SAMZ,SAASC,IACd,OACEf,EAAAC,EAAAC,cAAA,WAASC,GAAG,YACVH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,aACbV,EAAAC,EAAAC,cAACK,EAAD,CAAaO,MAAM,2BAA2BL,KAAK,iCAAiCI,OAAO,oCAC3Fb,EAAAC,EAAAC,cAACK,EAAD,CAAaO,MAAM,cAAcL,KAAK,yCAAyCI,OAAO,oCACtFb,EAAAC,EAAAC,cAACK,EAAD,CAAaO,MAAM,gBAAgBL,KAAK,yCAAyCI,OAAO,sCAMzF,SAASG,IACd,OACEhB,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,KAAGG,KAAK,6BAA6BF,GAAG,eAAec,OAAO,SAASC,IAAI,uBAA3E,0BACAlB,EAAAC,EAAAC,cAAA,KAAGG,KAAK,+BAAR,gCCxCSc,EAbO,WACpB,OACEnB,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAACH,EAAD,MACAC,EAAAC,EAAAC,cAACI,EAAD,MAEAN,EAAAC,EAAAC,cAACa,EAAD,MAEAf,EAAAC,EAAAC,cAACc,EAAD,QCAcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.90a66b93.chunk.js","sourcesContent":["import React from 'react'\n\nexport function Navbar(){\nreturn(\n<nav id=\"navbar\">\n  <ul role=\"navigation\">\n   <li>\n    <a href=\"#welcome-section\" id=\"a-welcome\">Emily&nbsp;Gagne</a>\n   </li><li>\n    <a href=\"#projects\" id=\"a-proj\">Projects</a>\n   </li><li>\n    <a href=\"#profile-link\">Connect</a>\n   </li>\n  </ul>\n </nav>\n );\n}\n\nexport function Welcome(){\n  return(\n    <header id=\"welcome-section\">\n      <h1 id=\"welcome-grid\">\n        <span id=\"greeting\">Hi!</span>\n        <span id=\"name\">I'm Emily.</span>\n        <span id=\"tagline\">It's nice to meet you.</span>\n      </h1>\n    </header>\n  );\n}\n\nfunction ProjectTile(props:any){\n  return(\n    <a href={props.link}>\n      <div className=\"project-tile\" style={{backgroundImage: 'url(' + props.imgSrc + ')'}}>\n      <span>{props.title}</span>\n      </div>\n    </a>\n  );\n}\n\nexport function ProjectSection(){\n  return(\n    <section id=\"projects\">\n      <h2>Projects</h2>\n      <div className=\"proj-flex\">\n        <ProjectTile title=\"Translation Practice App\" link=\"https://thaliak.herokuapp.com/\" imgSrc=\"https://i.imgur.com/NUPeg62.png\" />\n        <ProjectTile title=\"Survey Form\" link=\"https://codepen.io/ceg9498/full/ewzJrr\" imgSrc=\"https://i.imgur.com/AFWxD1W.png\" />\n        <ProjectTile title=\"Tech Doc Page\" link=\"https://codepen.io/ceg9498/full/pXbrqp\" imgSrc=\"https://i.imgur.com/ZJ92yGh.png\" />\n      </div>\n    </section>\n  );\n}\n\nexport function Footer(){\n  return(\n    <footer>\n      <a href=\"https://github.com/ceg9498\" id=\"profile-link\" target=\"_blank\" rel=\"noopener noreferrer\">View my work on Github</a>\n      <a href=\"https://twitter.com/ceg9498\">Twitter: @ceg9498</a>\n    </footer>\n  );\n}\n\n/* \n   \n   <a href=\"https://codepen.io/ceg9498/full/ewzJrr\">\n    <div className=\"project-tile\" style=\"background-image:url('https://i.imgur.com/AFWxD1W.png')\">\n     <span>Survey Form</span>\n    </div>\n   </a>\n   \n   <a href=\"https://codepen.io/ceg9498/full/pXbrqp\">\n    <div className=\"project-tile\" style=\"background-image:url('https://i.imgur.com/ZJ92yGh.png')\">\n     <span>Tech Doc Page</span>\n    </div>\n   </a> */","import React from 'react';\nimport { Navbar, Welcome, ProjectSection, Footer } from './Components'\nimport './App.scss';\n\nconst App: React.FC = () => {\n  return (\n    <article>\n      <Navbar />\n      <Welcome />\n\n      <ProjectSection />\n      \n      <Footer />\n    </article>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}